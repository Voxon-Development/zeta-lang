package zeta.lang

!enum ArrayError {
    IndexOutOfBounds
}

type Array<T, const N: usize>(Ptr<T> ptr);

inline Array.new() -> Array<T, N> {
    p := intrinsics::stack_alloc<T, N>()
    Array(p)
}

inline Array.zeroed() -> Array<T, N> {
    p := intrinsics::stack_alloc_zeroed<T, N>()
    Array(p)
}

inline get<T>(Array<T> array, usize index) -> T? {
    if (index >= length) {
        return null
    }
    uncheckedGet(index)
}

inline set<T>(Array<T> array, usize index, T value) -> void! {
    if (index >= array.length) {
        return ArrayError.IndexOutOfBounds
    }
    uncheckedSet(index, value)
}

unsafe inline uncheckedGet<T>(Array<T> array, usize index) -> T? {
    offset := index * sizeOf<T>()
    p := unsafe { self.ptr.add(offset) }
    p?.deref()
}

unsafe inline uncheckedSet<T>(Array<T> array, usize index, T value) {
    offset := index * sizeOf<T>()
    p := unsafe { array.ptr.add(offset) }
    p.store(value)
}
